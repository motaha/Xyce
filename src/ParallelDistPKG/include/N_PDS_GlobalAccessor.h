//-----------------------------------------------------------------------------
// Copyright Notice
//
//   Copyright 2002 Sandia Corporation. Under the terms
//   of Contract DE-AC04-94AL85000 with Sandia Corporation, the U.S.
//   Government retains certain rights in this software.
//
//    Xyce(TM) Parallel Electrical Simulator
//    Copyright (C) 2002-2013  Sandia Corporation
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Filename       : $RCSfile: N_PDS_GlobalAccessor.h,v $
//
// Purpose        : Migrator tool using Zoltan utilities
//
// Special Notes  :
//
// Creator        : Robert Hoekstra, SNL, Parallel Computational Sciences
//
// Creation Date  : 06/07/00
//
// Revision Information:
// ---------------------
//
// Revision Number: $Revision: 1.12.6.2 $
//
// Revision Date  : $Date: 2013/10/03 17:23:48 $
//
// Current Owner  : $Author: tvrusso $
//-----------------------------------------------------------------------------

#ifndef Xyce_N_PDS_GlobalAccessor_h
#define Xyce_N_PDS_GlobalAccessor_h

// ---------- Standard Includes ----------

#include <string>
#include <list>
#include <map>
#include <vector>

// ---------- Forward Declarations -------

class N_LAS_MultiVector;
class N_PDS_Comm;
class N_PDS_ParMap;

#ifdef Xyce_PARALLEL_MPI
//class GSComm_Plan;
//class GSComm_Comm;
#endif
class Epetra_Distributor;

// ----------   Xyce Includes   ----------

#include <N_UTL_Misc.h>

// ----------   Other Includes   ----------


//-----------------------------------------------------------------------------
// Class         : N_PDS_GlobalAccessor
// Purpose       : Migrator utility to retrieve off processor elements
//                 of distributed objects
// Special Notes :
// Creator       : Robert Hoekstra, SNL, Parallel Compuational Sciences
// Creation Date : 06/07/00
//-----------------------------------------------------------------------------
class N_PDS_GlobalAccessor
{

public:
  // Constructors
  N_PDS_GlobalAccessor(N_PDS_Comm * comm = 0);

  // Destructor
  ~N_PDS_GlobalAccessor();

private:
  // No public copy construction, assignment, or equality operators.

  // Copy constructor (private).
  N_PDS_GlobalAccessor(const N_PDS_GlobalAccessor & right);

  // Assignment operator (private).
  N_PDS_GlobalAccessor & operator = (const N_PDS_GlobalAccessor & right);

  // Equality operation.
  bool operator == (const N_PDS_GlobalAccessor & right) const;

  // Non-equality operation.
  bool operator != (const N_PDS_GlobalAccessor & right) const;

public:
  // Registration methods for pointer attributes.
  void registerPDSComm(N_PDS_Comm * comm) { pdsComm_ = comm; }

  void registerExternGIDVector(const vector < pair < int,
                               int > > & extGIDVector);

  // Uses data from TopoLSUtil::ExternSVarList to generate migration plan using
  // Zoltan utilities.
  void generateMigrationPlan();

  // Migrates off processor elements of MultiVector using plan generated by
  // above method.
  void migrateMultiVector(N_LAS_MultiVector * mVector);

  // Migrator for integer array (currently to be used for global index reset).
  void migrateIntArray(map < int, int > & sendMap, map < int,
                       int > & recvMap);

  // Migrator for integer array (currently to be used for global index reset).
  void migrateIntVecs(map < int, vector < int > > & sendMap, map < int,
                      vector < int > > & recvMap);

private:

  // PDS Comm object pointer.
  N_PDS_Comm * pdsComm_;

  // Vector listing extern GIDs and their respective procs needed for nonlocal
  // dependencies.
  vector < pair < int, int > > externGIDVector_;

  // Number of objects to be received.
  int numReceiveObjs_;

  // Vector listing receive GIDs.
  vector < pair < int, int > > receiveGIDVector_;

  int * arrayReceiveGIDs_;
  int * arrayReceiveLIDs_;
  int * arrayReceiveProcs_;

  // Pointer to the receiving buffer.
  char * recvBuf_;
  int recvBufSize_;

  // Number of objects to be sent.
  int numSendObjs_;

  // Vector listing sending GIDs.
  vector < pair < int, int > > sendGIDVector_;

  int * arraySendGIDs_;
  int * arraySendLIDs_;
  int * arraySendProcs_;

  // Pointer to the sending buffer.
  char * sendBuf_;
  int sendBufSize_;

#ifdef Xyce_PARALLEL_MPI
  //  GSComm_Plan * GSPlan_;
  //  GSComm_Comm * GSComm_;
#endif

  Epetra_Distributor * distributor_;

};

//-----------------------------------------------------------------------------
// Function      : N_PDS_GlobalAccessor::registerExternGIDVector
// Purpose       : Registers vector of external GIDs and procs.
// Special Notes :
// Scope         : public
// Creator       : Robert Hoekstra, SNL, Parallel Compuational Sciences
// Creation Date : 06/07/00
//-----------------------------------------------------------------------------
inline void N_PDS_GlobalAccessor::registerExternGIDVector(
  const vector < pair < int, int > > & extGIDVector)
{

  // First, clear the vector...
  externGIDVector_.clear();

  // Then, assign the GIDs and processors.
  externGIDVector_.assign(extGIDVector.begin(), extGIDVector.end());
}

#endif



// -*-c++-*-
//-----------------------------------------------------------------------------
// Copyright Notice
//
//   Copyright 2002 Sandia Corporation. Under the terms
//   of Contract DE-AC04-94AL85000 with Sandia Corporation, the U.S.
//   Government retains certain rights in this software.
//
//    Xyce(TM) Parallel Electrical Simulator
//    Copyright (C) 2002-2014 Sandia Corporation
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Filename       : $RCSfile: N_DEV_ADMSPSP103VA.h,v $
//
// Purpose        :
//
// Special Notes  : Generated from verilog file psp103.va with ADMS 
//                  interface for Xyce 6.1.0
//                  DO NOT EDIT THIS FILE DIRECTLY!  It may be overwritten!
//
// Creator        : admsXml-2.3.0
//
// Creation Date  : Thu, 06 Mar 2014 16:00:39
//
// Revision Information:
// ---------------------
//
// Revision Number: $Revision: 1.34.2.2 $
//
// Revision Date  : $Date: 2014/03/06 23:33:42 $
//
// Current Owner  : $Author: tvrusso $
//-----------------------------------------------------------------------------
#ifndef Xyce_N_DEV_ADMSPSP103VA_h
#define Xyce_N_DEV_ADMSPSP103VA_h


#include <Sacado.hpp>

#include <N_DEV_Configuration.h>
#include <N_DEV_Const.h>
#include <N_DEV_DeviceBlock.h>
#include <N_DEV_DeviceInstance.h>
#include <N_DEV_DeviceModel.h>
#include <N_DEV_MOSFET1.h>


namespace Xyce {
namespace Device {
namespace ADMSPSP103VA {

class Model;
class Instance;

struct Traits: public DeviceTraits<Model, Instance, MOSFET1::Traits>
{
  static const char *name() {return "PSP103VA MOSFET";}
  static const char *deviceTypeName() {return "m level 103";}

  static const int numNodes() {return 4;}
  static const bool modelRequired() {return true;}
  static const bool isLinearDevice() {return false;}

  static Device *factory(const Configuration &configuration, const FactoryBlock &factory_block);
  static void loadModelParameters(ParametricData<Model> &model_parameters);
  static void loadInstanceParameters(ParametricData<Instance> &instance_parameters);
};

//-----------------------------------------------------------------------------
// Class         : Instance

//
// Purpose       : This class represents a single instance  of the
//                 device.  It mainly contains indices and pointers into
//                 the matrix equation (see the resistor instance class for
//                 more details).
//
// Special Notes :
// Creator       :
// Creation Date :
//-----------------------------------------------------------------------------
class Instance : public DeviceInstance
{
  friend class ParametricData<Instance>;
  friend class Model;
  friend class Traits;

  // This typedef is for our automatic differentiation:
  typedef Sacado::Fad::SFad<double,12> AdmsFadType;

public:
  Instance(
     const Configuration &       configuration,
     const InstanceBlock &       instance_block,
     Model &                     model,
     const FactoryBlock &        factory_block);

  ~Instance();

private:
  Instance(const Instance &);
  Instance &operator=(const Instance &);

public:
  void registerLIDs( const std::vector<int> & intLIDVecRef,
                     const std::vector<int> & extLIDVecRef );
  void registerStateLIDs( const std::vector<int> & staLIDVecRef );
  void setupPointers();

  std::map<int,std::string> & getIntNameMap ();

  const std::vector< std::vector<int> > & jacobianStamp() const;
  void registerJacLIDs( const std::vector< std::vector<int> > & jacLIDVec );

  bool processParams();
  bool updateTemperature ( const double & temp = -999.0 );
  bool updateIntermediateVars ();
  bool updatePrimaryState ();
  bool updateSecondaryState ();

  // load functions, residual:
  bool loadDAEQVector ();
  bool loadDAEFVector ();

  // load functions, Jacobian:
  bool loadDAEdQdx ();
  bool loadDAEdFdx ();

  void collapseNodes();

private:
  // Limited exponential --- NOT what verilog LRM says, but what qucs,
  // ng-spice, and zspice do.

  template <typename T>
  T limexp(T &x)
  {
    if ((x) < 80.0)
      return (exp(x));
    else
      return (exp(80.0)*(x-79.0));
  }


public:
  // iterator reference to the PSP103VA model which owns this instance.
  // Getters and setters
  Model &getModel()
  {
    return model_;
  }

private:

  Model & model_;   //< Owning Model
  // Begin verilog Instance Variables
  //   Instance Parameters
  double L;
  double W;
  double SA;
  double SB;
  double SD;
  double SCA;
  double SCB;
  double SCC;
  double SC;
  double NF;
  double NGCON;
  double XGW;
  double NRS;
  double NRD;
  double JW;
  double DELVTO;
  double FACTUO;
  double ABSOURCE;
  double LSSOURCE;
  double LGSOURCE;
  double ABDRAIN;
  double LSDRAIN;
  double LGDRAIN;
  double AS;
  double PS;
  double AD;
  double PD;
  double MULT;
  //  Variables of global_instance scope
  double VFB_i;
  double GFACNUD_i;
  double VNSUB_i;
  double NSLP_i;
  double DNSUB_i;
  double CF_i;
  double CFB_i;
  double MUE_i;
  double THEMU_i;
  double CS_i;
  double XCOR_i;
  double THER_i;
  double RSB_i;
  double RSG_i;
  double THESAT_i;
  double THESATB_i;
  double THESATG_i;
  double AX_i;
  double ALP_i;
  double ALP1_i;
  double ALP2_i;
  double A1_i;
  double A2_i;
  double A3_i;
  double A4_i;
  double IGINV_i;
  double IGOV_i;
  double IGOVD_i;
  double GC2_i;
  double GC3_i;
  double CHIB_i;
  double AGIDL_i;
  double BGIDL_i;
  double CGIDL_i;
  double AGIDLD_i;
  double BGIDLD_i;
  double CGIDLD_i;
  double COX_i;
  double CGOV_i;
  double CGOVD_i;
  double CGBOV_i;
  double CFR_i;
  double CFRD_i;
  double MULT_i;
  double BET_i;
  double kp;
  double qq;
  double qlim2;
  double E_eff0;
  double eta_mu;
  double eta_mu1;
  double BCH;
  double BOV;
  double inv_CHIB;
  double GCQ;
  double Dch;
  double Dov;
  double x1;
  double Vdsat_lim;
  double GOV_s;
  double GOV_d;
  double GOV2_s;
  double GOV2_d;
  double BOV_d;
  double xi_ov_s;
  double xi_ov_d;
  double inv_xi_ov_s;
  double inv_xi_ov_d;
  double x_mrg_ov_s;
  double x_mrg_ov_d;
  double inv_xg1_s;
  double inv_xg1_d;
  double phit1;
  double inv_phit1;
  double alpha_b;
  double inv_VP;
  double inv_AX;
  double us1;
  double us21;
  double phib_dc;
  double sqrt_phib_dc;
  double G_0_dc;
  double aphi_dc;
  double bphi_dc;
  double phix_dc;
  double phix1_dc;
  double phib_ac;
  double sqrt_phib_ac;
  double G_0_ac;
  double aphi_ac;
  double bphi_ac;
  double phix_ac;
  double phix1_ac;
  double RG_i;
  double RSE_i;
  double RDE_i;
  double RBULK_i;
  double RWELL_i;
  double RJUNS_i;
  double RJUND_i;
  double ggate;
  double gsource;
  double gdrain;
  double gbulk;
  double gwell;
  double gjund;
  double gjuns;
  AdmsFadType tmpv;
  AdmsFadType vjv;
  AdmsFadType idmult;
  AdmsFadType vj;
  AdmsFadType zinv;
  AdmsFadType vjsrh;
  AdmsFadType vav;
  AdmsFadType vbi_minus_vjsrh;
  AdmsFadType wsrh;
  AdmsFadType wdep;
  AdmsFadType asrh;
  double ABSOURCE_i;
  double LSSOURCE_i;
  double LGSOURCE_i;
  double zflagbot_s;
  double zflagsti_s;
  double zflaggat_s;
  double VMAX_s;
  double exp_VMAX_over_phitd_s;
  double vbimin_s;
  double vch_s;
  double vfmin_s;
  double vbbtlim_s;
  AdmsFadType ijunbot_s;
  AdmsFadType qjunbot_s;
  AdmsFadType ijunsti_s;
  AdmsFadType qjunsti_s;
  AdmsFadType ijungat_s;
  AdmsFadType qjungat_s;
  AdmsFadType ijun_s;
  AdmsFadType qjun_s;
  double xhighf1_s;
  double expxhf1_s;
  double xhighf2_s;
  double expxhf2_s;
  double xhighr_s;
  double expxhr_s;
  double m0flag_s;
  double ISATFOR1_s;
  double MFOR1_s;
  double ISATFOR2_s;
  double MFOR2_s;
  double ISATREV_s;
  double MREV_s;
  double ABDRAIN_i;
  double LSDRAIN_i;
  double LGDRAIN_i;
  double zflagbot_d;
  double zflagsti_d;
  double zflaggat_d;
  double VMAX_d;
  double exp_VMAX_over_phitd_d;
  double vbimin_d;
  double vch_d;
  double vfmin_d;
  double vbbtlim_d;
  AdmsFadType ijunbot_d;
  AdmsFadType qjunbot_d;
  AdmsFadType ijunsti_d;
  AdmsFadType qjunsti_d;
  AdmsFadType ijungat_d;
  AdmsFadType qjungat_d;
  AdmsFadType ijun_d;
  AdmsFadType qjun_d;
  double xhighf1_d;
  double expxhf1_d;
  double xhighf2_d;
  double expxhf2_d;
  double xhighr_d;
  double expxhr_d;
  double m0flag_d;
  double ISATFOR1_d;
  double MFOR1_d;
  double ISATFOR2_d;
  double MFOR2_d;
  double ISATREV_d;
  double MREV_d;
  // end verilog Instance Variables=====
  // Nodal LID Variables
  int li_D;
  int li_G;
  int li_S;
  int li_B;
  int li_GP;
  int li_SI;
  int li_DI;
  int li_BI;
  int li_BP;
  int li_BS;
  int li_BD;
  // end Nodal LID Variables
  // Branch LID Variables
  // end Branch LID Variables
  // Jacobian  pointers
  double * f_DI_Equ_SI_Node_Ptr;
  double * f_DI_Equ_BP_Node_Ptr;
  double * f_BP_Equ_SI_Node_Ptr;
  double * f_BP_Equ_BP_Node_Ptr;
  double * f_DI_Equ_GP_Node_Ptr;
  double * f_BP_Equ_GP_Node_Ptr;
  double * f_DI_Equ_DI_Node_Ptr;
  double * f_BP_Equ_DI_Node_Ptr;
  double * f_SI_Equ_SI_Node_Ptr;
  double * f_SI_Equ_BP_Node_Ptr;
  double * f_SI_Equ_GP_Node_Ptr;
  double * f_SI_Equ_DI_Node_Ptr;
  double * f_GP_Equ_SI_Node_Ptr;
  double * f_GP_Equ_BP_Node_Ptr;
  double * f_GP_Equ_DI_Node_Ptr;
  double * f_GP_Equ_GP_Node_Ptr;
  double * f_BS_Equ_SI_Node_Ptr;
  double * f_BS_Equ_BS_Node_Ptr;
  double * f_SI_Equ_BS_Node_Ptr;
  double * f_BS_Equ_DI_Node_Ptr;
  double * f_BS_Equ_BD_Node_Ptr;
  double * f_SI_Equ_BD_Node_Ptr;
  double * f_BD_Equ_SI_Node_Ptr;
  double * f_BD_Equ_BS_Node_Ptr;
  double * f_DI_Equ_BS_Node_Ptr;
  double * f_BD_Equ_DI_Node_Ptr;
  double * f_BD_Equ_BD_Node_Ptr;
  double * f_DI_Equ_BD_Node_Ptr;
  double * f_G_Equ_G_Node_Ptr;
  double * f_G_Equ_GP_Node_Ptr;
  double * f_GP_Equ_G_Node_Ptr;
  double * f_S_Equ_S_Node_Ptr;
  double * f_S_Equ_SI_Node_Ptr;
  double * f_SI_Equ_S_Node_Ptr;
  double * f_D_Equ_D_Node_Ptr;
  double * f_D_Equ_DI_Node_Ptr;
  double * f_DI_Equ_D_Node_Ptr;
  double * f_BP_Equ_BI_Node_Ptr;
  double * f_BI_Equ_BP_Node_Ptr;
  double * f_BI_Equ_BI_Node_Ptr;
  double * f_BS_Equ_BI_Node_Ptr;
  double * f_BI_Equ_BS_Node_Ptr;
  double * f_BD_Equ_BI_Node_Ptr;
  double * f_BI_Equ_BD_Node_Ptr;
  double * f_B_Equ_B_Node_Ptr;
  double * f_B_Equ_BI_Node_Ptr;
  double * f_BI_Equ_B_Node_Ptr;
  double * q_DI_Equ_SI_Node_Ptr;
  double * q_DI_Equ_BP_Node_Ptr;
  double * q_BP_Equ_SI_Node_Ptr;
  double * q_BP_Equ_BP_Node_Ptr;
  double * q_DI_Equ_GP_Node_Ptr;
  double * q_BP_Equ_GP_Node_Ptr;
  double * q_DI_Equ_DI_Node_Ptr;
  double * q_BP_Equ_DI_Node_Ptr;
  double * q_SI_Equ_SI_Node_Ptr;
  double * q_SI_Equ_BP_Node_Ptr;
  double * q_SI_Equ_GP_Node_Ptr;
  double * q_SI_Equ_DI_Node_Ptr;
  double * q_GP_Equ_SI_Node_Ptr;
  double * q_GP_Equ_BP_Node_Ptr;
  double * q_GP_Equ_DI_Node_Ptr;
  double * q_GP_Equ_GP_Node_Ptr;
  double * q_BS_Equ_SI_Node_Ptr;
  double * q_BS_Equ_BS_Node_Ptr;
  double * q_SI_Equ_BS_Node_Ptr;
  double * q_BS_Equ_DI_Node_Ptr;
  double * q_BS_Equ_BD_Node_Ptr;
  double * q_SI_Equ_BD_Node_Ptr;
  double * q_BD_Equ_SI_Node_Ptr;
  double * q_BD_Equ_BS_Node_Ptr;
  double * q_DI_Equ_BS_Node_Ptr;
  double * q_BD_Equ_DI_Node_Ptr;
  double * q_BD_Equ_BD_Node_Ptr;
  double * q_DI_Equ_BD_Node_Ptr;
  double * q_G_Equ_G_Node_Ptr;
  double * q_G_Equ_GP_Node_Ptr;
  double * q_GP_Equ_G_Node_Ptr;
  double * q_S_Equ_S_Node_Ptr;
  double * q_S_Equ_SI_Node_Ptr;
  double * q_SI_Equ_S_Node_Ptr;
  double * q_D_Equ_D_Node_Ptr;
  double * q_D_Equ_DI_Node_Ptr;
  double * q_DI_Equ_D_Node_Ptr;
  double * q_BP_Equ_BI_Node_Ptr;
  double * q_BI_Equ_BP_Node_Ptr;
  double * q_BI_Equ_BI_Node_Ptr;
  double * q_BS_Equ_BI_Node_Ptr;
  double * q_BI_Equ_BS_Node_Ptr;
  double * q_BD_Equ_BI_Node_Ptr;
  double * q_BI_Equ_BD_Node_Ptr;
  double * q_B_Equ_B_Node_Ptr;
  double * q_B_Equ_BI_Node_Ptr;
  double * q_BI_Equ_B_Node_Ptr;
  // end of Jacobian and pointers
  // node numbers
  static const int admsNodeID_D = 0;
  static const int admsNodeID_G = 1;
  static const int admsNodeID_S = 2;
  static const int admsNodeID_B = 3;
  static const int admsNodeID_GP = 4;
  static const int admsNodeID_SI = 5;
  static const int admsNodeID_DI = 6;
  static const int admsNodeID_BI = 7;
  static const int admsNodeID_BP = 8;
  static const int admsNodeID_BS = 9;
  static const int admsNodeID_BD = 10;
  // end node numbers
  // Additional IDs for branch equations
  // end branch numbers
  // Probe numbers
  static const int admsProbeID_V_DI_BD = 0;
  static const int admsProbeID_V_SI_BS = 1;
  static const int admsProbeID_V_SI_BP = 2;
  static const int admsProbeID_V_DI_SI = 3;
  static const int admsProbeID_V_GP_SI = 4;
  static const int admsProbeID_V_B_BI = 5;
  static const int admsProbeID_V_BP_BI = 6;
  static const int admsProbeID_V_BD_BI = 7;
  static const int admsProbeID_V_BS_BI = 8;
  static const int admsProbeID_V_D_DI = 9;
  static const int admsProbeID_V_S_SI = 10;
  static const int admsProbeID_V_G_GP = 11;
  // end probe numbers
  // State LIDs
  // end state LIDs
  // bools for collapsing nodes
  bool collapseNode_GP;
  bool collapseNode_SI;
  bool collapseNode_DI;
  bool collapseNode_BI;
  bool collapseNode_BP;
  bool collapseNode_BS;
  bool collapseNode_BD;
  // Arrays to hold probes
  std::vector < AdmsFadType > probeVars;
  // Arrays to hold contributions
  // dynamic contributions are differentiated w.r.t time
  std::vector < AdmsFadType > staticContributions;
  std::vector < AdmsFadType > dynamicContributions;


  // this is what we'll use when any model uses $temperature.  We'll
  // set it in updateTemperature, and initialize it to whatever
  // is in devOptions when the instance is constructed.
  double admsTemperature;

  // vt at $temperature;
  double adms_vt_nom;


  // This one is for the annoying bogus "XyceADMSInstTemp" parameter
  // that we need so we can set it from the device manager when there's no
  // "TEMP" parameter to use
  double admsInstTemp;

  // thermal voltage at kelvin temperature temp)
  inline double adms_vt(double temp) {return(CONSTKoverQ*temp);};

  std::vector< std::vector<int> > jacStamp;
  std::vector<int> jacMap;
  std::vector< std::vector<int> > jacMap2;
};


//-----------------------------------------------------------------------------
// Class         : Model

// Purpose       :
// Special Notes :
// Creator       :
// Creation Date :
//-----------------------------------------------------------------------------
class Model : public DeviceModel
{
  typedef std::vector<Instance *> InstanceVector;

  friend class ParametricData<Model>;
  friend class Instance;
  friend class Traits;

  typedef Sacado::Fad::SFad<double,12> AdmsFadType;

public:
  Model(
     const Configuration &       configuration,
     const ModelBlock &          model_block,
     const FactoryBlock &        factory_block);

  ~Model();

private:
  Model(const Model &);
  Model &operator=(const Model &);

public:
  virtual void forEachInstance(DeviceInstanceOp &op) const /* override */;
  virtual std::ostream &printOutInstances(std::ostream &os) const;
  bool processParams();
  bool processInstanceParams();

private:

public:
  void addInstance(Instance *instance)
  {
    instanceContainer.push_back(instance);
  }

  InstanceVector &getInstanceVector()
  {
    return instanceContainer;
  }

  const InstanceVector &getInstanceVector() const
  {
    return instanceContainer;
  }

private:
  std::vector<Instance*> instanceContainer;

private:

  // This one is for the annoying bogus "XyceADMSInstTemp" parameter
  // that we need so we can set it from the device manager when there's no
  // "TEMP" model parameter to use
  double admsModTemp;
  // Begin verilog Model Variables
  //   Model Parameters
  double LEVEL;
  double TYPE;
  double TR;
  double SWGEO;
  double SWIGATE;
  double SWIMPACT;
  double SWGIDL;
  double SWJUNCAP;
  double SWJUNASYM;
  double SWNUD;
  double SWDELVTAC;
  double QMC;
  double VFB;
  double STVFB;
  double TOX;
  double EPSROX;
  double NEFF;
  double FACNEFFAC;
  double GFACNUD;
  double VSBNUD;
  double DVSBNUD;
  double VNSUB;
  double NSLP;
  double DNSUB;
  double DPHIB;
  double DELVTAC;
  double NP;
  double CT;
  double TOXOV;
  double TOXOVD;
  double NOV;
  double NOVD;
  double CF;
  double CFB;
  double BETN;
  double STBET;
  double MUE;
  double STMUE;
  double THEMU;
  double STTHEMU;
  double CS;
  double STCS;
  double XCOR;
  double STXCOR;
  double FETA;
  double RS;
  double STRS;
  double RSB;
  double RSG;
  double THESAT;
  double STTHESAT;
  double THESATB;
  double THESATG;
  double AX;
  double ALP;
  double ALP1;
  double ALP2;
  double VP;
  double A1;
  double A2;
  double STA2;
  double A3;
  double A4;
  double GCO;
  double IGINV;
  double IGOV;
  double IGOVD;
  double STIG;
  double GC2;
  double GC3;
  double CHIB;
  double AGIDL;
  double AGIDLD;
  double BGIDL;
  double BGIDLD;
  double STBGIDL;
  double STBGIDLD;
  double CGIDL;
  double CGIDLD;
  double COX;
  double CGOV;
  double CGOVD;
  double CGBOV;
  double CFR;
  double CFRD;
  double FNT;
  double NFA;
  double NFB;
  double NFC;
  double EF;
  double RG;
  double RSE;
  double RDE;
  double RBULK;
  double RWELL;
  double RJUNS;
  double RJUND;
  double POVFB;
  double PLVFB;
  double PWVFB;
  double PLWVFB;
  double POSTVFB;
  double PLSTVFB;
  double PWSTVFB;
  double PLWSTVFB;
  double POTOX;
  double POEPSROX;
  double PONEFF;
  double PLNEFF;
  double PWNEFF;
  double PLWNEFF;
  double POFACNEFFAC;
  double PLFACNEFFAC;
  double PWFACNEFFAC;
  double PLWFACNEFFAC;
  double POGFACNUD;
  double PLGFACNUD;
  double PWGFACNUD;
  double PLWGFACNUD;
  double POVSBNUD;
  double PODVSBNUD;
  double POVNSUB;
  double PONSLP;
  double PODNSUB;
  double PODPHIB;
  double PLDPHIB;
  double PWDPHIB;
  double PLWDPHIB;
  double PODELVTAC;
  double PLDELVTAC;
  double PWDELVTAC;
  double PLWDELVTAC;
  double PONP;
  double PLNP;
  double PWNP;
  double PLWNP;
  double POCT;
  double PLCT;
  double PWCT;
  double PLWCT;
  double POTOXOV;
  double POTOXOVD;
  double PONOV;
  double PLNOV;
  double PWNOV;
  double PLWNOV;
  double PONOVD;
  double PLNOVD;
  double PWNOVD;
  double PLWNOVD;
  double POCF;
  double PLCF;
  double PWCF;
  double PLWCF;
  double POCFB;
  double POBETN;
  double PLBETN;
  double PWBETN;
  double PLWBETN;
  double POSTBET;
  double PLSTBET;
  double PWSTBET;
  double PLWSTBET;
  double POMUE;
  double PLMUE;
  double PWMUE;
  double PLWMUE;
  double POSTMUE;
  double POTHEMU;
  double POSTTHEMU;
  double POCS;
  double PLCS;
  double PWCS;
  double PLWCS;
  double POSTCS;
  double POXCOR;
  double PLXCOR;
  double PWXCOR;
  double PLWXCOR;
  double POSTXCOR;
  double POFETA;
  double PORS;
  double PLRS;
  double PWRS;
  double PLWRS;
  double POSTRS;
  double PORSB;
  double PORSG;
  double POTHESAT;
  double PLTHESAT;
  double PWTHESAT;
  double PLWTHESAT;
  double POSTTHESAT;
  double PLSTTHESAT;
  double PWSTTHESAT;
  double PLWSTTHESAT;
  double POTHESATB;
  double PLTHESATB;
  double PWTHESATB;
  double PLWTHESATB;
  double POTHESATG;
  double PLTHESATG;
  double PWTHESATG;
  double PLWTHESATG;
  double POAX;
  double PLAX;
  double PWAX;
  double PLWAX;
  double POALP;
  double PLALP;
  double PWALP;
  double PLWALP;
  double POALP1;
  double PLALP1;
  double PWALP1;
  double PLWALP1;
  double POALP2;
  double PLALP2;
  double PWALP2;
  double PLWALP2;
  double POVP;
  double POA1;
  double PLA1;
  double PWA1;
  double PLWA1;
  double POA2;
  double POSTA2;
  double POA3;
  double PLA3;
  double PWA3;
  double PLWA3;
  double POA4;
  double PLA4;
  double PWA4;
  double PLWA4;
  double POGCO;
  double POIGINV;
  double PLIGINV;
  double PWIGINV;
  double PLWIGINV;
  double POIGOV;
  double PLIGOV;
  double PWIGOV;
  double PLWIGOV;
  double POIGOVD;
  double PLIGOVD;
  double PWIGOVD;
  double PLWIGOVD;
  double POSTIG;
  double POGC2;
  double POGC3;
  double POCHIB;
  double POAGIDL;
  double PLAGIDL;
  double PWAGIDL;
  double PLWAGIDL;
  double POAGIDLD;
  double PLAGIDLD;
  double PWAGIDLD;
  double PLWAGIDLD;
  double POBGIDL;
  double POBGIDLD;
  double POSTBGIDL;
  double POSTBGIDLD;
  double POCGIDL;
  double POCGIDLD;
  double POCOX;
  double PLCOX;
  double PWCOX;
  double PLWCOX;
  double POCGOV;
  double PLCGOV;
  double PWCGOV;
  double PLWCGOV;
  double POCGOVD;
  double PLCGOVD;
  double PWCGOVD;
  double PLWCGOVD;
  double POCGBOV;
  double PLCGBOV;
  double PWCGBOV;
  double PLWCGBOV;
  double POCFR;
  double PLCFR;
  double PWCFR;
  double PLWCFR;
  double POCFRD;
  double PLCFRD;
  double PWCFRD;
  double PLWCFRD;
  double POFNT;
  double PONFA;
  double PLNFA;
  double PWNFA;
  double PLWNFA;
  double PONFB;
  double PLNFB;
  double PWNFB;
  double PLWNFB;
  double PONFC;
  double PLNFC;
  double PWNFC;
  double PLWNFC;
  double POEF;
  double POKVTHOWE;
  double PLKVTHOWE;
  double PWKVTHOWE;
  double PLWKVTHOWE;
  double POKUOWE;
  double PLKUOWE;
  double PWKUOWE;
  double PLWKUOWE;
  double LMIN;
  double LMAX;
  double WMIN;
  double WMAX;
  double LVARO;
  double LVARL;
  double LVARW;
  double LAP;
  double WVARO;
  double WVARL;
  double WVARW;
  double WOT;
  double DLQ;
  double DWQ;
  double VFBO;
  double VFBL;
  double VFBW;
  double VFBLW;
  double STVFBO;
  double STVFBL;
  double STVFBW;
  double STVFBLW;
  double TOXO;
  double EPSROXO;
  double NSUBO;
  double NSUBW;
  double WSEG;
  double NPCK;
  double NPCKW;
  double WSEGP;
  double LPCK;
  double LPCKW;
  double FOL1;
  double FOL2;
  double FACNEFFACO;
  double FACNEFFACL;
  double FACNEFFACW;
  double FACNEFFACLW;
  double GFACNUDO;
  double GFACNUDL;
  double GFACNUDLEXP;
  double GFACNUDW;
  double GFACNUDLW;
  double VSBNUDO;
  double DVSBNUDO;
  double VNSUBO;
  double NSLPO;
  double DNSUBO;
  double DPHIBO;
  double DPHIBL;
  double DPHIBLEXP;
  double DPHIBW;
  double DPHIBLW;
  double DELVTACO;
  double DELVTACL;
  double DELVTACLEXP;
  double DELVTACW;
  double DELVTACLW;
  double NPO;
  double NPL;
  double CTO;
  double CTL;
  double CTLEXP;
  double CTW;
  double CTLW;
  double TOXOVO;
  double TOXOVDO;
  double LOV;
  double LOVD;
  double NOVO;
  double NOVDO;
  double CFL;
  double CFLEXP;
  double CFW;
  double CFBO;
  double UO;
  double FBET1;
  double FBET1W;
  double LP1;
  double LP1W;
  double FBET2;
  double LP2;
  double BETW1;
  double BETW2;
  double WBET;
  double STBETO;
  double STBETL;
  double STBETW;
  double STBETLW;
  double MUEO;
  double MUEW;
  double STMUEO;
  double THEMUO;
  double STTHEMUO;
  double CSO;
  double CSL;
  double CSLEXP;
  double CSW;
  double CSLW;
  double STCSO;
  double XCORO;
  double XCORL;
  double XCORW;
  double XCORLW;
  double STXCORO;
  double FETAO;
  double RSW1;
  double RSW2;
  double STRSO;
  double RSBO;
  double RSGO;
  double THESATO;
  double THESATL;
  double THESATLEXP;
  double THESATW;
  double THESATLW;
  double STTHESATO;
  double STTHESATL;
  double STTHESATW;
  double STTHESATLW;
  double THESATBO;
  double THESATGO;
  double AXO;
  double AXL;
  double ALPL;
  double ALPLEXP;
  double ALPW;
  double ALP1L1;
  double ALP1LEXP;
  double ALP1L2;
  double ALP1W;
  double ALP2L1;
  double ALP2LEXP;
  double ALP2L2;
  double ALP2W;
  double VPO;
  double A1O;
  double A1L;
  double A1W;
  double A2O;
  double STA2O;
  double A3O;
  double A3L;
  double A3W;
  double A4O;
  double A4L;
  double A4W;
  double GCOO;
  double IGINVLW;
  double IGOVW;
  double IGOVDW;
  double STIGO;
  double GC2O;
  double GC3O;
  double CHIBO;
  double AGIDLW;
  double AGIDLDW;
  double BGIDLO;
  double BGIDLDO;
  double STBGIDLO;
  double STBGIDLDO;
  double CGIDLO;
  double CGIDLDO;
  double CGBOVL;
  double CFRW;
  double CFRDW;
  double FNTO;
  double NFALW;
  double NFBLW;
  double NFCLW;
  double EFO;
  double LINTNOI;
  double ALPNOI;
  double KVTHOWEO;
  double KVTHOWEL;
  double KVTHOWEW;
  double KVTHOWELW;
  double KUOWEO;
  double KUOWEL;
  double KUOWEW;
  double KUOWELW;
  double RGO;
  double RINT;
  double RVPOLY;
  double RSHG;
  double DLSIL;
  double RSH;
  double RSHD;
  double RBULKO;
  double RWELLO;
  double RJUNSO;
  double RJUNDO;
  double SAREF;
  double SBREF;
  double WLOD;
  double KUO;
  double KVSAT;
  double TKUO;
  double LKUO;
  double WKUO;
  double PKUO;
  double LLODKUO;
  double WLODKUO;
  double KVTHO;
  double LKVTHO;
  double WKVTHO;
  double PKVTHO;
  double LLODVTH;
  double WLODVTH;
  double STETAO;
  double LODETAO;
  double SCREF;
  double WEB;
  double WEC;
  double IMAX;
  double TRJ;
  double CJORBOT;
  double CJORSTI;
  double CJORGAT;
  double VBIRBOT;
  double VBIRSTI;
  double VBIRGAT;
  double PBOT;
  double PSTI;
  double PGAT;
  double PHIGBOT;
  double PHIGSTI;
  double PHIGGAT;
  double IDSATRBOT;
  double IDSATRSTI;
  double IDSATRGAT;
  double CSRHBOT;
  double CSRHSTI;
  double CSRHGAT;
  double XJUNSTI;
  double XJUNGAT;
  double CTATBOT;
  double CTATSTI;
  double CTATGAT;
  double MEFFTATBOT;
  double MEFFTATSTI;
  double MEFFTATGAT;
  double CBBTBOT;
  double CBBTSTI;
  double CBBTGAT;
  double FBBTRBOT;
  double FBBTRSTI;
  double FBBTRGAT;
  double STFBBTBOT;
  double STFBBTSTI;
  double STFBBTGAT;
  double VBRBOT;
  double VBRSTI;
  double VBRGAT;
  double PBRBOT;
  double PBRSTI;
  double PBRGAT;
  double CJORBOTD;
  double CJORSTID;
  double CJORGATD;
  double VBIRBOTD;
  double VBIRSTID;
  double VBIRGATD;
  double PBOTD;
  double PSTID;
  double PGATD;
  double PHIGBOTD;
  double PHIGSTID;
  double PHIGGATD;
  double IDSATRBOTD;
  double IDSATRSTID;
  double IDSATRGATD;
  double CSRHBOTD;
  double CSRHSTID;
  double CSRHGATD;
  double XJUNSTID;
  double XJUNGATD;
  double CTATBOTD;
  double CTATSTID;
  double CTATGATD;
  double MEFFTATBOTD;
  double MEFFTATSTID;
  double MEFFTATGATD;
  double CBBTBOTD;
  double CBBTSTID;
  double CBBTGATD;
  double FBBTRBOTD;
  double FBBTRSTID;
  double FBBTRGATD;
  double STFBBTBOTD;
  double STFBBTSTID;
  double STFBBTGATD;
  double VBRBOTD;
  double VBRSTID;
  double VBRGATD;
  double PBRBOTD;
  double PBRSTID;
  double PBRGATD;
  double SWJUNEXP;
  double VJUNREF;
  double FJUNQ;
  double VJUNREFD;
  double FJUNQD;
  double DTA;
  //  Variables of global_model scope
  double NSUBO_i;
  double WSEG_i;
  double NPCK_i;
  double WSEGP_i;
  double LPCK_i;
  double LOV_i;
  double LOVD_i;
  double LP1_i;
  double LP2_i;
  double WBET_i;
  double AXL_i;
  double ALP1L2_i;
  double ALP2L2_i;
  double TOXO_i;
  double TOXOVO_i;
  double TOXOVDO_i;
  double EPSROXO_i;
  double RINT_i;
  double RVPOLY_i;
  double RSHG_i;
  double RSH_i;
  double RSHD_i;
  double SAREF_i;
  double SBREF_i;
  double KVSAT_i;
  double LLODKUO_i;
  double WLODKUO_i;
  double LLODVTH_i;
  double WLODVTH_i;
  double LODETAO_i;
  double SCREF_i;
  double WEB_i;
  double WEC_i;
  double QMC_i;
  double TKD;
  double dT;
  double rT;
  double rTn;
  double EPSSI;
  double phit;
  double inv_phit;
  double Eg;
  double phibFac;
  double nt0;
  int CHNL_TYPE;
  int SWGEO_i;
  int SWIGATE_i;
  int SWIMPACT_i;
  int SWGIDL_i;
  int SWJUNCAP_i;
  int SWJUNASYM_i;
  int SWNUD_i;
  int SWDELVTAC_i;
  double IMAX_i;
  double CJORBOT_i;
  double CJORSTI_i;
  double CJORGAT_i;
  double VBIRBOT_i;
  double VBIRSTI_i;
  double VBIRGAT_i;
  double PBOT_i;
  double PSTI_i;
  double PGAT_i;
  double PHIGBOT_i;
  double PHIGSTI_i;
  double PHIGGAT_i;
  double IDSATRBOT_i;
  double IDSATRSTI_i;
  double IDSATRGAT_i;
  double XJUNSTI_i;
  double XJUNGAT_i;
  double CSRHBOT_i;
  double CSRHSTI_i;
  double CSRHGAT_i;
  double CTATBOT_i;
  double CTATSTI_i;
  double CTATGAT_i;
  double MEFFTATBOT_i;
  double MEFFTATSTI_i;
  double MEFFTATGAT_i;
  double CBBTBOT_i;
  double CBBTSTI_i;
  double CBBTGAT_i;
  double FBBTRBOT_i;
  double FBBTRSTI_i;
  double FBBTRGAT_i;
  double STFBBTBOT_i;
  double STFBBTSTI_i;
  double STFBBTGAT_i;
  double VBRBOT_i;
  double VBRSTI_i;
  double VBRGAT_i;
  double PBRBOT_i;
  double PBRSTI_i;
  double PBRGAT_i;
  double SWJUNEXP_i;
  double VJUNREF_i;
  double FJUNQ_i;
  double phitr;
  double phitd;
  double phitdinv;
  double perfc;
  double berfc;
  double cerfc;
  double phigrbot;
  double phigrsti;
  double phigrgat;
  double phigdbot;
  double phigdsti;
  double phigdgat;
  double ftdbot;
  double ftdsti;
  double ftdgat;
  double idsatbot;
  double idsatsti;
  double idsatgat;
  double ubibot;
  double ubisti;
  double ubigat;
  double vbibot;
  double vbisti;
  double vbigat;
  double vbiinvbot;
  double vbiinvsti;
  double vbiinvgat;
  double one_minus_PBOT;
  double one_minus_PSTI;
  double one_minus_PGAT;
  double one_over_one_minus_PBOT;
  double one_over_one_minus_PSTI;
  double one_over_one_minus_PGAT;
  double cjobot;
  double cjosti;
  double cjogat;
  double qprefbot;
  double qprefsti;
  double qprefgat;
  double qpref2bot;
  double qpref2sti;
  double qpref2gat;
  double wdepnulrbot;
  double wdepnulrsti;
  double wdepnulrgat;
  double wdepnulrinvbot;
  double wdepnulrinvsti;
  double wdepnulrinvgat;
  double VBIRBOTinv;
  double VBIRSTIinv;
  double VBIRGATinv;
  double deltaEbot;
  double deltaEsti;
  double deltaEgat;
  double atatbot;
  double atatsti;
  double atatgat;
  double btatpartbot;
  double btatpartsti;
  double btatpartgat;
  double fbbtbot;
  double fbbtsti;
  double fbbtgat;
  double fstopbot;
  double fstopsti;
  double fstopgat;
  double VBRinvbot;
  double VBRinvsti;
  double VBRinvgat;
  double slopebot;
  double slopesti;
  double slopegat;
  double CJORBOTS_i;
  double CJORSTIS_i;
  double CJORGATS_i;
  double VBIRBOTS_i;
  double VBIRSTIS_i;
  double VBIRGATS_i;
  double PBOTS_i;
  double PSTIS_i;
  double PGATS_i;
  double PHIGBOTS_i;
  double PHIGSTIS_i;
  double PHIGGATS_i;
  double IDSATRBOTS_i;
  double IDSATRSTIS_i;
  double IDSATRGATS_i;
  double XJUNSTIS_i;
  double XJUNGATS_i;
  double CSRHBOTS_i;
  double CSRHSTIS_i;
  double CSRHGATS_i;
  double CTATBOTS_i;
  double CTATSTIS_i;
  double CTATGATS_i;
  double MEFFTATBOTS_i;
  double MEFFTATSTIS_i;
  double MEFFTATGATS_i;
  double CBBTBOTS_i;
  double CBBTSTIS_i;
  double CBBTGATS_i;
  double FBBTRBOTS_i;
  double FBBTRSTIS_i;
  double FBBTRGATS_i;
  double STFBBTBOTS_i;
  double STFBBTSTIS_i;
  double STFBBTGATS_i;
  double VBRBOTS_i;
  double VBRSTIS_i;
  double VBRGATS_i;
  double PBRBOTS_i;
  double PBRSTIS_i;
  double PBRGATS_i;
  double CJORBOTD_i;
  double CJORSTID_i;
  double CJORGATD_i;
  double VBIRBOTD_i;
  double VBIRSTID_i;
  double VBIRGATD_i;
  double PBOTD_i;
  double PSTID_i;
  double PGATD_i;
  double PHIGBOTD_i;
  double PHIGSTID_i;
  double PHIGGATD_i;
  double IDSATRBOTD_i;
  double IDSATRSTID_i;
  double IDSATRGATD_i;
  double XJUNSTID_i;
  double XJUNGATD_i;
  double CSRHBOTD_i;
  double CSRHSTID_i;
  double CSRHGATD_i;
  double CTATBOTD_i;
  double CTATSTID_i;
  double CTATGATD_i;
  double MEFFTATBOTD_i;
  double MEFFTATSTID_i;
  double MEFFTATGATD_i;
  double CBBTBOTD_i;
  double CBBTSTID_i;
  double CBBTGATD_i;
  double FBBTRBOTD_i;
  double FBBTRSTID_i;
  double FBBTRGATD_i;
  double STFBBTBOTD_i;
  double STFBBTSTID_i;
  double STFBBTGATD_i;
  double VBRBOTD_i;
  double VBRSTID_i;
  double VBRGATD_i;
  double PBRBOTD_i;
  double PBRSTID_i;
  double PBRGATD_i;
  double VJUNREFS_i;
  double FJUNQS_i;
  double VJUNREFD_i;
  double FJUNQD_i;
  double phigrbot_s;
  double phigrsti_s;
  double phigrgat_s;
  double phigdbot_s;
  double phigdsti_s;
  double phigdgat_s;
  double ftdbot_s;
  double ftdsti_s;
  double ftdgat_s;
  double idsatbot_s;
  double idsatsti_s;
  double idsatgat_s;
  double ubibot_s;
  double ubisti_s;
  double ubigat_s;
  double vbibot_s;
  double vbisti_s;
  double vbigat_s;
  double vbiinvbot_s;
  double vbiinvsti_s;
  double vbiinvgat_s;
  double one_minus_PBOT_s;
  double one_minus_PSTI_s;
  double one_minus_PGAT_s;
  double one_over_one_minus_PBOT_s;
  double one_over_one_minus_PSTI_s;
  double one_over_one_minus_PGAT_s;
  double cjobot_s;
  double cjosti_s;
  double cjogat_s;
  double qprefbot_s;
  double qprefsti_s;
  double qprefgat_s;
  double qpref2bot_s;
  double qpref2sti_s;
  double qpref2gat_s;
  double wdepnulrbot_s;
  double wdepnulrsti_s;
  double wdepnulrgat_s;
  double wdepnulrinvbot_s;
  double wdepnulrinvsti_s;
  double wdepnulrinvgat_s;
  double VBIRBOTinv_s;
  double VBIRSTIinv_s;
  double VBIRGATinv_s;
  double deltaEbot_s;
  double deltaEsti_s;
  double deltaEgat_s;
  double atatbot_s;
  double atatsti_s;
  double atatgat_s;
  double btatpartbot_s;
  double btatpartsti_s;
  double btatpartgat_s;
  double fbbtbot_s;
  double fbbtsti_s;
  double fbbtgat_s;
  double fstopbot_s;
  double fstopsti_s;
  double fstopgat_s;
  double VBRinvbot_s;
  double VBRinvsti_s;
  double VBRinvgat_s;
  double slopebot_s;
  double slopesti_s;
  double slopegat_s;
  double phigrbot_d;
  double phigrsti_d;
  double phigrgat_d;
  double phigdbot_d;
  double phigdsti_d;
  double phigdgat_d;
  double ftdbot_d;
  double ftdsti_d;
  double ftdgat_d;
  double idsatbot_d;
  double idsatsti_d;
  double idsatgat_d;
  double ubibot_d;
  double ubisti_d;
  double ubigat_d;
  double vbibot_d;
  double vbisti_d;
  double vbigat_d;
  double vbiinvbot_d;
  double vbiinvsti_d;
  double vbiinvgat_d;
  double one_minus_PBOT_d;
  double one_minus_PSTI_d;
  double one_minus_PGAT_d;
  double one_over_one_minus_PBOT_d;
  double one_over_one_minus_PSTI_d;
  double one_over_one_minus_PGAT_d;
  double cjobot_d;
  double cjosti_d;
  double cjogat_d;
  double qprefbot_d;
  double qprefsti_d;
  double qprefgat_d;
  double qpref2bot_d;
  double qpref2sti_d;
  double qpref2gat_d;
  double wdepnulrbot_d;
  double wdepnulrsti_d;
  double wdepnulrgat_d;
  double wdepnulrinvbot_d;
  double wdepnulrinvsti_d;
  double wdepnulrinvgat_d;
  double VBIRBOTinv_d;
  double VBIRSTIinv_d;
  double VBIRGATinv_d;
  double deltaEbot_d;
  double deltaEsti_d;
  double deltaEgat_d;
  double atatbot_d;
  double atatsti_d;
  double atatgat_d;
  double btatpartbot_d;
  double btatpartsti_d;
  double btatpartgat_d;
  double fbbtbot_d;
  double fbbtsti_d;
  double fbbtgat_d;
  double fstopbot_d;
  double fstopsti_d;
  double fstopgat_d;
  double VBRinvbot_d;
  double VBRinvsti_d;
  double VBRinvgat_d;
  double slopebot_d;
  double slopesti_d;
  double slopegat_d;
  // end verilog model variables=====
};

void registerDevice();

} // namespace ADMSPSP103VA
} // namespace Device
} // namespace Xyce
#endif //Xyce_N_DEV_ADMSPSP103VA_h

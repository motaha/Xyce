//-----------------------------------------------------------------------------
// Copyright Notice
//
//   Copyright 2002 Sandia Corporation. Under the terms
//   of Contract DE-AC04-94AL85000 with Sandia Corporation, the U.S.
//   Government retains certain rights in this software.
//
//    Xyce(TM) Parallel Electrical Simulator
//    Copyright (C) 2002-2014 Sandia Corporation
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Filename       : $RCSfile: N_TOP_ParNode.h,v $
//
// Purpose        :
//
// Special Notes  :
//
// Creator        : Rob Hoekstra
//
// Creation Date  : 7/17/01
//
// Revision Information:
// ---------------------
//
// Revision Number: $Revision: 1.13 $
//
// Revision Date  : $Date: 2014/02/24 23:49:27 $
//
// Current Owner  : $Author: tvrusso $
//-----------------------------------------------------------------------------

#ifndef  _N_TOP_PARNODE_H
#define  _N_TOP_PARNODE_H

#include <string>
#include <set>
#include <iosfwd>

#include <N_TOP_Node.h>

#define PNP_CAST(x) (reinterpret_cast<N_TOP_ParNode*>(x))

namespace Xyce {
namespace Topo {

//-----------------------------------------------------------------------------
// Class         : ParNode
// Purpose       :
// Special Notes :
// Creator       : Rob Hoekstra, SNL, Parallel Computational Sciences
// Creation Date : 7/17/01
//-----------------------------------------------------------------------------
class ParNode : public Node
{

public:

  // Constructor
  ParNode( const NodeID & nid = NodeID("", -1),
                 const bool & owned = true,
                 const int & proc = 0)
  : Node(nid, owned),
    proc_(proc)
  {}

  // Constructor
  ParNode(const Node & node, const int & proc = 0)
  : Node(node),
    proc_(proc)
  {}

  // Destructor
  ~ParNode() { }

  Node * clone() const { return new ParNode(* this); }

  Node * expr() const { return new ParNode(); }

  // Simple copy construction, autogenerated by compiler.
  bool operator==(const ParNode & right) const
  { return (nodeID_.first == right.nodeID_.first); }

  // Non-equality operator.
  bool operator!=(const ParNode & right) const
  { return (nodeID_.first != right.nodeID_.first); }

  int & proc() { return proc_; }

  std::set< int > & ghosts() { return ghosts_; }

  // Packable functionality.
  Packable * instance() const { return new ParNode(); }

  // Counts number of bytes needed to pack object.
  int packedByteCount() const;

  // Packs NodeBlock into char buffer using MPI_PACK.
  void pack(char * buf, int bsize, int & pos, N_PDS_Comm * comm) const;
  void pack(char * buf, int bsize, int & pos, N_PDS_Comm & comm) const
  { pack( buf, bsize, pos, &comm ); }
  // Unpacks NodeBlock from char buffer using MPI_UNPACK.
  void unpack(char * buf, int bsize, int & pos, N_PDS_Comm * comm);
  void unpack(char * buf, int bsize, int & pos, N_PDS_Comm & comm)
  { unpack( buf, bsize, pos, &comm ); }

protected:

  int proc_;

  std::set<int> ghosts_;

  std::ostream & put(std::ostream & os) const;
  friend std::ostream & operator<<(std::ostream & os, const ParNode & pn);

};

//-----------------------------------------------------------------------------
// Function      : ParNode::packedByteCount
// Purpose       : Constructor
// Scope         : public
// Special Notes :
// Creator       : Rob Hoekstra, SNL, Parallel Computational Sciences
// Creation Date : 5/18/01
//-----------------------------------------------------------------------------
inline int ParNode::packedByteCount() const
{
  int count = Node::packedByteCount();

  count += sizeof(int); //proc

  count += sizeof(int); //ghosts_ size
  count += ghosts_.size() * sizeof(int); //ghosts_

  return count;
}

} // namespace Topo
} // namespace Xyce

typedef Xyce::Topo::ParNode N_TOP_ParNode;

#endif

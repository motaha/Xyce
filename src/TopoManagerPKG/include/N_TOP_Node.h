//-----------------------------------------------------------------------------
// Copyright Notice
//
//   Copyright 2002 Sandia Corporation. Under the terms
//   of Contract DE-AC04-94AL85000 with Sandia Corporation, the U.S.
//   Government retains certain rights in this software.
//
//    Xyce(TM) Parallel Electrical Simulator
//    Copyright (C) 2002-2013  Sandia Corporation
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Filename       : $RCSfile: N_TOP_Node.h,v $
//
// Purpose        :
//
// Special Notes  :
//
// Creator        : Rob Hoekstra
//
// Creation Date  : 5/25/01
//
// Revision Information:
// ---------------------
//
// Revision Number: $Revision: 1.10.6.2 $
//
// Revision Date  : $Date: 2013/10/03 17:23:51 $
//
// Current Owner  : $Author: tvrusso $
//-----------------------------------------------------------------------------

#ifndef _N_TOP_NODE_H
#define _N_TOP_NODE_H

// ---------- Standard Includes ----------
#include <string>
#include <iosfwd>

// ----------   Xyce Includes   ----------
#include <N_TOP_Misc.h>
#include <N_UTL_Xyce.h>
#include <N_UTL_Packable.h>

// ----------   Fwd Declares   -----------

class N_TOP_Graph;

//-----------------------------------------------------------------------------
// Class         : N_TOP_Node
// Purpose       : Structure containing minimal info for node lookup
// Special Notes :
// Creator       : Rob Hoekstra, SNL, Parallel Computational Sciences
// Creation Date : 5/18/01
//-----------------------------------------------------------------------------
class N_TOP_Node : public Packable
{

public:

  // Constructor
  N_TOP_Node(const NodeID & nid = NodeID("", -1), const bool & owned = true)
    :
    nodeID_(nid), owned_(owned)
    { }

  // Destructor
  virtual ~N_TOP_Node() { }

  virtual N_TOP_Node * clone() const { return new N_TOP_Node(* this); }

  virtual N_TOP_Node * expr() const { return new N_TOP_Node(); }

  //--------------------------------------------------------------------
  //Simple copy construction and assignment, autogenerated by compiler
  //--------------------------------------------------------------------

  // Equality operator
  bool operator == (const N_TOP_Node & right) const
  { return (nodeID_.first == right.nodeID_.first); }

  // Non-equality operator
  bool operator != (const N_TOP_Node & right) const
  { return (nodeID_.first != right.nodeID_.first); }

  // Get the node ID.
  NodeID & nodeID() { return nodeID_; }

  string & ID() { return nodeID_.first; }

  int & GID() { return nodeID_.second; }

  bool & owned() { return owned_; }

  N_TOP_Graph * & graph() { return graph_; }

  // Packable functionality.
  virtual Packable * instance() const { return new N_TOP_Node(); }

  // Counts number of bytes needed to pack object.
  virtual int packedByteCount() const;

  // Packs NodeBlock into char buffer using MPI_PACK.
  virtual void pack(char * buf, int bsize, int & pos, N_PDS_Comm * comm) const;
  // Unpacks NodeBlock from char buffer using MPI_UNPACK.
  virtual void unpack(char * buf, int bsize, int & pos, N_PDS_Comm * comm);

protected:

  NodeID nodeID_;
  bool owned_;

  N_TOP_Graph * graph_;

  virtual ostream & put(ostream & os) const;
  friend ostream & operator << (ostream & os, N_TOP_Node & node);

};

//-----------------------------------------------------------------------------
// Function      : N_TOP_Node::packedByteCount
// Purpose       : Constructor
// Scope         : public
// Special Notes :
// Creator       : Rob Hoekstra, SNL, Parallel Computational Sciences
// Creation Date : 5/18/01
//-----------------------------------------------------------------------------
inline int N_TOP_Node::packedByteCount() const
{
  int count = 0;

  count += sizeof(int); //ID length
  count += nodeID_.first.length(); //ID

  count += sizeof(int); //gID

  count += sizeof(int); //owned

  return count;
}

#endif

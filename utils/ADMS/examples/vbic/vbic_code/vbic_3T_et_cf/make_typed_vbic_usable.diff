--- N_DEV_ADMSvbic.C	2013-12-16 13:00:11.176233430 -0700
+++ N_DEV_ADMSvbic.C	2013-12-16 12:50:48.384218187 -0700
@@ -397,7 +397,8 @@
                                                            q_dt_Equ_b_Node_Ptr(0),
                                                            q_dt_Equ_ci_Node_Ptr(0),
                                                            q_dt_Equ_c_Node_Ptr(0),
-                                                           admsTemperature(getDeviceOptions().temp.getImmutableValue<double>())
+                                                           admsTemperature(getDeviceOptions().temp.getImmutableValue<double>()),
+                                                           externalNodeMode(false)
 
 {
   numIntVars = 6 + 0;
@@ -407,6 +408,23 @@
   // Right now, we only have state for limited probes...
   numStateVars = 7;
 
+  // Manually inserted code:
+  devConMap.resize(4);
+  devConMap[0] = 1;
+  devConMap[1] = 1;
+  devConMap[2] = 1;
+  devConMap[3] = 2;
+
+  if ( instance_block.numExtVars > 4)
+  {
+    numExtVars = instance_block.numExtVars;
+    externalNodeMode = true;
+    numIntVars -= numExtVars-4;
+    devConMap.resize(numExtVars);
+    for (int i1=4; i1<numExtVars; ++i1)
+      devConMap[i1]=1;
+  }
+  // End manually inserted code
 
   // Set up jacobian stamp:
 
@@ -532,6 +550,17 @@
   // calculate dependent (i.e. computed params) and check for errors.
   processParams();
   collapseNodes();
+
+  // Manually added code
+  // there are always ci and bi, but the others could be mapped away.
+  int numExist = ((collapseNode_cx)?0:1) + ((collapseNode_bx)?0:1) + ((collapseNode_ei)?0:1) + 2;
+
+  if (externalNodeMode && (numExtVars != 4+numExist))
+  {
+    DevelFatal0(*this) << "Instance " << getName() << " has wrong number of external nodes!"
+                       << " If you specify any internal nodes as external, you must set all that exist. ";
+  }
+  // End manually added code
 }
 
 //-----------------------------------------------------------------------------
@@ -712,24 +745,46 @@
   li_e = extLIDVecRef[i++];
   li_dt = extLIDVecRef[i++];
 
-
-  i=0;
+  // Manually modified code
+  int j=0;
   if (!collapseNode_cx)
-    li_cx = intLIDVecRef[i++];
+  {
+    if (externalNodeMode)
+      li_cx = extLIDVecRef[i++];
+    else
+      li_cx = intLIDVecRef[j++];
+  }
   else
     li_cx = li_c;
-  li_ci = intLIDVecRef[i++];
+  if (externalNodeMode)
+    li_ci = extLIDVecRef[i++];
+  else
+    li_ci = intLIDVecRef[j++];
+
   if (!collapseNode_bx)
-    li_bx = intLIDVecRef[i++];
+  {
+    if (externalNodeMode)
+      li_bx = extLIDVecRef[i++];
+    else
+      li_bx = intLIDVecRef[j++];
+  }
   else
     li_bx = li_b;
-  li_bi = intLIDVecRef[i++];
+  if (externalNodeMode)
+    li_bi = extLIDVecRef[i++];
+  else
+    li_bi = intLIDVecRef[j++];
   if (!collapseNode_ei)
-    li_ei = intLIDVecRef[i++];
+  {
+    if (externalNodeMode)
+      li_ei = extLIDVecRef[i++];
+    else
+      li_ei = intLIDVecRef[j++];
+  }
   else
     li_ei = li_e;
-  li_bp = intLIDVecRef[i++];
-
+  li_bp = intLIDVecRef[j++];
+  // End manually modified code
 
 #ifdef Xyce_DEBUG_DEVICE
   if (getDeviceOptions().debugLevel > 0)
@@ -771,7 +826,8 @@
   if (intNameMap.empty())
   {
     std::string tmpstr;
-    if (!collapseNode_cx)
+    // Manually Modified Code
+    if (!collapseNode_cx && !externalNodeMode)
     {
 
       tmpstr = getName() + "_cx";
@@ -779,10 +835,14 @@
       intNameMap[li_cx] = tmpstr;
     }
 
+    if (!externalNodeMode)
+    {
     tmpstr = getName() + "_ci";
     spiceInternalName(tmpstr);
     intNameMap[li_ci] = tmpstr;
-    if (!collapseNode_bx)
+    }
+
+    if (!collapseNode_bx && !externalNodeMode)
     {
 
       tmpstr = getName() + "_bx";
@@ -790,10 +850,14 @@
       intNameMap[li_bx] = tmpstr;
     }
 
+    if (!externalNodeMode)
+    {
     tmpstr = getName() + "_bi";
     spiceInternalName(tmpstr);
     intNameMap[li_bi] = tmpstr;
-    if (!collapseNode_ei)
+    }
+
+    if (!collapseNode_ei && !externalNodeMode)
     {
 
       tmpstr = getName() + "_ei";
@@ -804,7 +868,7 @@
     tmpstr = getName() + "_bp";
     spiceInternalName(tmpstr);
     intNameMap[li_bp] = tmpstr;
-
+    // End manually modified code
   }
   return intNameMap;
 }
@@ -1467,9 +1531,51 @@
 
   origFlag = true;
 
+  // code manually moved from below, because we need it earlier than predicted by adms
+  tVCrit = (adms_vt(admsTemperature)*log((adms_vt(admsTemperature)/(1.41421356237309504880*(model_.IS)))));
+
   if (getSolverState().newtonIter == 0)
   {
 
+    if (getSolverState().initJctFlag && getDeviceOptions().voltageLimiterFlag)
+    {
+      // manually inserted code:
+      if (getSolverState().inputOPFlag)
+      {
+        N_LAS_Vector * flagSolVectorPtr = (extData.flagSolVectorPtr);
+        if ((*flagSolVectorPtr)[li_e] == 0 ||
+            (*flagSolVectorPtr)[li_ei] == 0 ||
+            (*flagSolVectorPtr)[li_b] == 0 ||
+            (*flagSolVectorPtr)[li_bi] == 0 ||
+            (*flagSolVectorPtr)[li_bx] == 0 ||
+            (*flagSolVectorPtr)[li_bp] == 0 ||
+            (*flagSolVectorPtr)[li_c] == 0 ||
+            (*flagSolVectorPtr)[li_ci] == 0 ||
+            (*flagSolVectorPtr)[li_cx] == 0 ||
+            (*flagSolVectorPtr)[li_dt] == 0 )
+        {
+          Vbci_limited = Vbcx_limited = Vbep_limited = 0;
+          Vbe_limited = Vbei_limited = Vbex_limited = tVCrit;
+          Vrth_limited = 0;
+          origFlag = false;
+        }
+      }
+      else
+      {
+        Vbci_limited = Vbcx_limited = Vbep_limited = 0;
+        Vbe_limited = Vbei_limited = Vbex_limited = tVCrit;
+        Vrth_limited = 0;
+        origFlag = false;
+#ifdef Xyce_DEBUG_DEVICE
+        if (getDeviceOptions().debugLevel > 0 && getSolverState().debugTimeFlag)
+        {
+          Xyce::dout() << " Setting device initial condition to Base-Emitter drop=tVCrit (" << tVCrit << ")"<<std::endl;
+        }
+#endif
+      }
+    }
+    // end manually inserted code
+
     if (!(getSolverState().dcopFlag)||(getSolverState().locaEnabledFlag && getSolverState().dcopFlag))
     {
       Vbe_old = ((*extData.currStaVectorPtr))[li_state_admsProbeID_V_b_e];
@@ -1503,7 +1609,8 @@
   }
 
   // -- code converted from analog/code block
-  tVCrit = (adms_vt(admsTemperature)*log((adms_vt(admsTemperature)/(1.41421356237309504880*(model_.IS)))));
+  // manually moved to above, we need it earlier than this:
+  //tVCrit = (adms_vt(admsTemperature)*log((adms_vt(admsTemperature)/(1.41421356237309504880*(model_.IS)))));
 
 
   //Vbei = ($limit(V(bi,ei),"typedpnjlim_new",$vt(),tVCrit,dtype));
@@ -2732,7 +2839,15 @@
                  <<Jdxp_dynamic[admsNodeID_bp] << std::endl;
 
     if (!origFlag)
+    {
       Xyce::dout() << "This step was limited by this device." << std::endl;
+      Xyce::dout() << " Vbei_limited = " << Vbei_limited << " _orig = " << Vbei_orig << " diff = " << Vbei_limited - Vbei_orig << std::endl;
+      Xyce::dout() << " Vbci_limited = " << Vbci_limited << " _orig = " << Vbci_orig << " diff = " << Vbci_limited - Vbci_orig << std::endl;
+      Xyce::dout() << " Vbex_limited = " << Vbex_limited << " _orig = " << Vbex_orig << " diff = " << Vbex_limited - Vbex_orig << std::endl;
+      Xyce::dout() << " Vbcx_limited = " << Vbcx_limited << " _orig = " << Vbcx_orig << " diff = " << Vbcx_limited - Vbcx_orig << std::endl;
+      Xyce::dout() << " Vbep_limited = " << Vbep_limited << " _orig = " << Vbep_orig << " diff = " << Vbep_limited - Vbep_orig << std::endl;
+      Xyce::dout() << " Vrth_limited = " << Vrth_limited << " _orig = " << Vrth_orig << " diff = " << Vrth_limited - Vrth_orig << std::endl;
+    }
   }
 #endif // Xyce_DEBUG_DEVICE
   return true;
@@ -4651,12 +4755,22 @@
   if (!given("XYCEADMSMODTEMP"))
     admsModTemp=getDeviceOptions().temp.getImmutableValue<double>();
 
+  // Fix the TNOM parameter that has "helpfully" been converted to Kelvin
+  // by the DeviceEntity class
+
+  if (given("TNOM"))
+    TNOM -= CONSTCtoK;
+
   // Calculate any parameters specified as expressions:
 
   updateDependentParameters();
 
   // calculate dependent (ie computed) params and check for errors:
-  processParams();
+  //Manually inserted these two lines:
+  if (getType() == "pnp" || getType() == "PNP")
+    dtype = -1;
+
+  processParams();
 }
 
 //-----------------------------------------------------------------------------
--- N_DEV_ADMSvbic.h	2013-12-16 12:47:42.940220539 -0700
+++ N_DEV_ADMSvbic.h	2013-12-16 12:48:13.168269392 -0700
@@ -69,3 +69,4 @@
   static const int numNodes() {return 4;}
+  static const int numOptionalNodes() {return 5;}
   static const bool modelRequired() {return true;}
   static const bool isLinearDevice() {return false;}
@@ -374,6 +375,10 @@
   // "TEMP" parameter to use
   double admsInstTemp;
 
+  // This is used to flag whether the cx, bx, and ei nodes are exposed
+  // on the instance line as external nodes.
+  bool externalNodeMode;
+
   // thermal voltage at kelvin temperature temp)
   inline double adms_vt(double temp) {return(CONSTKoverQ*temp);};
 

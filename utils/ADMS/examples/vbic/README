

This file gives information on the VBIC code, release 1.2.
For a short synopsis of the changes see the file "History".

Here is a list of the major changes:

1. The thermal network has been returned to its original form,
   which was how it was implemented in all simulators anyway.
   The "tl" node was incorrect, the Ith current had to circulate
   from dt to tl and so could not allow tl to funtion as a
   coupling node. Ith has to have one end grounded.
   Note: this means that the value of RTH used for single
   device self-heating differs from that used when a thermal
   network couples more than one device.
2. All of the model additions agreed to at the BCTM meetings
   have been implemented
   - temperature dependence of IKF
   - separate temperature coefficients for intrinsic and
     extrinsic resistances
   - a 3 terminal version
   - base-emitter breakdown model (simple exponential)
   - reach-through model to limit base-collector depletion capacitance
   - VERS version parameter added (also VREV for version revision)
   - separate activation energy added for ISP
3. Additional changes were made based on feedback from many sources
   - errors in solvers and derivatives for electrothermal model fixed
   - simple continutation added to improve solver convergence
   - QBM parameter add to switch to SGP qb formulation
   - NKF added to parameterize beta(Ic) high-current rolloff
   - fixed collector-substrate capacitance added (CCSO)
   - for HBTs, ISRR added to allow separate IS for reverse operation
   - an error in the built-in potential temperature mapping was fixed
   - code bypass for efficiency, if some parameters are zero
   - limited exponential version provided
   - the transport current Icc was explicitly separated into
     forward and reverse components
4. The automated code generation has been completely rewritten.
   All code, including solvers, is now generated. Solvers exist
   for all combinations of the code (see below).
5. IMPORTANT: note that the polarities of some of the current
   branches have changed. This was necessary because Verilog-A
   supports (or appears to support) branches to ground referenced
   from a node to ground, and not from ground to a node.
   The Ith and Itzf branches in the thermal and excess phase
   networks are now defined as the negative of what they were,
   but the connection polarity is switched. Ith is now negative,
   but flows from dt to ground. This must be taken into
   account when setting up the matrix stamp properly.
6. The name is now VBIC and not VBIC95.

The original source code is the vbic.vcs file. This is in a Verilog-A
type format, with multi-line macros. The simulator used
for verification does not support multi-line Verilog-A macros,
so the multi-line macros are evaluated when this is mapped
into the vbic.vla file. Conditional statements are used in the
vbic.vcs and vbic.vla files so that there is one source for
all 3- and 4-terminal, iso- and electro-thermal, and constant-
and excess-phase versions.

The code is under the directory vbic_code. There are 8
directories under that:
			#Elect	Electro	Excess
	Name		Terms	Thermal	Phase
	=============	=======	=======	======
	vbic_3T_it_cf	3	no	no
	vbic_3T_it_xf	3	no	yes
	vbic_3T_et_cf	3	yes	no
	vbic_3T_et_xf	3	yes	yes
	vbic_4T_it_cf	4	no	no
	vbic_4T_it_xf	4	no	yes
	vbic_4T_et_cf	4	yes	no
	vbic_4T_et_xf	4	yes	yes
These can be selected by appropriate specification of
the following `define text macros. Note that the specification
of a 3- or 4-terminal model relates to the number of
electrical terminals, and does not include the local temperature
node for the electrothermal version of the model.
There are two separate versions of each of the above,
with and without homotopy. When the homotopy is included
this code will not work in Verilog-A, but will be
handled by the VBIC code generator properly.
THE HOMOTOPY CODE HAS NOT BEEN TESTED.

Code is now provided in the following forms:
.vla	Verilog-A
.f	FORTRAN
.c	C
.pl	Perl
.sin	MAST
The FORTRAN, C, and Perl codes have been checked,
by an automated symbolic code checker, to be equivalent.
The FORTRAN and C codes have been compiled with g77 and gcc,
respectively, and compile with no warnings or errors.
The C code is in the gcc_code directory. This is to avoid
confusing make when generating the FORTRAN solvers.
There is a Makefile in each directory that will compile (with g77)
solvers for each flavor of code. (If g77 is installed on your
system, just issue the command "make" in one of the version
subdirectories to generate test solvers). The solvers have changed
a bit from before. The "solverv" versions requires specification
of Vc Vb Ve and Vs (for 4T version) for biasing, the "solveri"
version substitutes Ib for Vb. The output printed is the terminal
biases (plus dt temperature for electrothermal flavors) plus
number of iterations on one line, followed by terminal currents
on the next line. There is a -ac (or -yp) option, which requires
the addition of a frequency on the bias input line, and 6
extra lines are printed:
frequency
beta (magnitude of h11)
Re(y11) Im(y11)
Re(y12) Im(y12)
Re(y21) Im(y21)
Re(y22) Im(y22)
This obviates the need for the separate y-parameter solver that
was provided previously. Note that the solvers take as an
argument specification of a file that has Name-Value pairs
(with no separating equals sign) of parameters. Previously
there had to exist a file called PARS with exactly all
parameters in order, in Value-Name pairs per line.
If you do not specify a parameter it takes on its default
value. If you specify it more than once it takes on the
last value in the file. Use the -h flag to get a help
message from the solvers.

The voltage bias driven solver is automatically tested when the
code is generated, the results are stored in the ".solverv.results"
file. The Verilog-A version is also automatically tested, (the
circuit used for this is in the .ckt file) and the
results of this are in the ".vla.results" file. The results
of both tests are compared and are the same (the comparison has
a tolerance of 0.1%). There is no Perl solver provided yet.
A tableau, rather than MNA, version was generated. This was nice
in that it could easily handle resistances being set to zero on
the fly, and could easily handle switching between voltage and current
terminal bias specifications. But it was very slow compared to the
FORTRAN code and the convergence of the formulation was not as
good as the MNA. So I am still working on it (it is nice in that
it does not need to be compiled). The MAST version has not yet
been checked and is only a first cut at automated generation.
It should not be used.

The previous test suite is now in the test directory.
There is a program TestVbic there. Reference test
results are in the Reference directory. They are
slightly changed from previously, because of correction
of errors in the electrothermal modeling, because of tightened
convergence in the solvers, and because of changes in numerical
ordering that alters the last printed digit of the results.
You will need to compile and place the _4T_it_xf, _4T_et_cf
and _4T_it_xf solvers in the test directory for the
program to run.

There have been requests for versions of the code with parameters
in arrays as well as with symbolic references to parameters.
The versions of the FORTRAN and C code that have symbolic
parameter names have "_psym" in their names. There were also
requests for limited exponentials that are used with convergence
algorithms in some simulators. These versions can be identified
with the "_elim" in their names. This means there are four
versions of the C and FORTRAN code for each flavor.
Also, for Jacobian bypass and algorithms that do not require
derivatives there is a function only code, identified by _f.c
or _f.f endings. The normal function+derivative code for Newton
based solvers is identified by _fj.f and _fj.c endings.
The contents of the _DefaultParameters files should be obvious.
The _t.f, _t.c and _t.pl files are the temperature mappings for
parameters. The map the array pnom to the array p.

The excess phase version does not need to be implemented strictly
using 3 extra system variables, as at first seems to be the
case for MNA, the inductor current and the two node voltages.
The resistor in the excess phase network is 1 ohm, therefore
the voltage at node xf2 is the same as the current through
the inductor. The extra system equations to solve are then:
Itzf-V(xf2)-j*w*C*V(xf1)=0
j*w*L*V(xf2)+V(xf2)-V(xf1)=0
where C=TD and L=TD/3.
Look at the solver code to see how this is done. It makes the
inductor "look" like a capacitor as far as the MNA formulation
is concerned, this is because V=L*dI/dt gets mapped to
V=j*w*L*I and I is just V(xf2) so the inductor current does
not need to be added as a system variable.

Further documentation will be forthcoming.
An extractor will also be forthcoming.

To help set up the matrix stamp in a particular simulator,
the following lists the inputs, outputs, and dependencies
for each branch. This is from the electrothermal, excess phase
version.

Inputs:		Vbc Vbci Vbcp Vbcx Vbe Vbei Vbep Vbex Vcei Vcep Vcxf Vrbi \
		Vrbp Vrbx Vrci Vrcx Vre Vrs Vrth Vrxf
Outputs:	Ibc Ibcp Ibe Ibep Ibex Iccp Irbi Irbp Irbx Irci Ircx Ire Irs \
		Irth Ith Itxf Itzr Ixxf Ixzf Qbc Qbco Qbcp Qbcx Qbe Qbeo Qbep Qbex Qcth Qcxf
		Vbc	->	Qbco
		Vbci	->	Ibc Iccp Irbi Irbp Irci Ith Itzr Ixzf Qbc Qbe Qbep
		Vbcp	->	Ibcp Iccp Ith Qbcp
		Vbcx	->	Irci Ith Qbcx
		Vbe	->	Qbeo
		Vbei	->	Ibc Ibe Irbi Ith Itzr Ixzf Qbe
		Vbep	->	Ibep Iccp Irbp Ith Qbep
		Vbex	->	Ibex Ith Qbex
		Vcei	->	Ith
		Vcep	->	Ith
		Vcxf	->	Qcxf
		Vrbi	->	Irbi Ith
		Vrbp	->	Irbp Ith
		Vrbx	->	Irbx Ith
		Vrci	->	Irci Ith
		Vrcx	->	Ircx Ith
		Vre	->	Ire Ith
		Vrs	->	Irs Ith
		Vrth	->	Ibc Ibcp Ibe Ibep Ibex Iccp Irbi Irbp Irbx Irci Ircx \
				Ire Irs Irth Ith Itzr Ixzf Qbc Qbcp Qbcx Qbe Qbep Qbex Qcth
		Vrxf	->	Ibc Ith Itxf Ixxf
		Ibc	<-	Vbci Vbei Vrth Vrxf
		Ibcp	<-	Vbcp Vrth
		Ibe	<-	Vbei Vrth
		Ibep	<-	Vbep Vrth
		Ibex	<-	Vbex Vrth
		Iccp	<-	Vbci Vbcp Vbep Vrth
		Irbi	<-	Vbci Vbei Vrbi Vrth
		Irbp	<-	Vbci Vbep Vrbp Vrth
		Irbx	<-	Vrbx Vrth
		Irci	<-	Vbci Vbcx Vrci Vrth
		Ircx	<-	Vrcx Vrth
		Ire	<-	Vre Vrth
		Irs	<-	Vrs Vrth
		Irth	<-	Vrth
		Ith	<-	Vbci Vbcp Vbcx Vbei Vbep Vbex Vcei Vcep Vrbi Vrbp Vrbx Vrci \
				Vrcx Vre Vrs Vrth Vrxf
		Itxf	<-	Vrxf
		Itzr	<-	Vbci Vbei Vrth
		Ixxf	<-	Vrxf
		Ixzf	<-	Vbci Vbei Vrth
		Qbc	<-	Vbci Vrth
		Qbco	<-	Vbc
		Qbcp	<-	Vbcp Vrth
		Qbcx	<-	Vbcx Vrth
		Qbe	<-	Vbci Vbei Vrth
		Qbeo	<-	Vbe
		Qbep	<-	Vbci Vbep Vrth
		Qbex	<-	Vbex Vrth
		Qcth	<-	Vrth
		Qcxf	<-	Vcxf

I would like to acknowledge certain people for their contributions
over the last years. I do this knowing that I will forget some
people, please forgive me for this. These people have contributed
recommended improvements, reported problems, found glitches in the
solvers, and many other things. Thank you. No particular order.

John Hamel
Jerry Seitchik
Medhat Karam
Shahriar Moinian
Bob Melville
Didier Celi
Paul Humphries
John O'Sullivan
Ivan Pesic
Shaun Simpkins
Keith Walter
Wenyi Zhou
Zoltan Huszka
Guenther Palfinger
Jean-Paul Malzac
Emannuel Blanc
Brenner Pietro
Didier Celi
Frank Thiel
Anthony Ng
Doug Weiser
Alexei Sadovnikov
Roland Freidrich
Nikolai Bannov

and many others.

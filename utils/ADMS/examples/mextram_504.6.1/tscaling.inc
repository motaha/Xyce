// Temperature scaling of parameters

   // The excess transistor temperature due to the self-heating 
`ifdef SELFHEATING
   Vdt = V(dt);
`else
   Vdt = 0.0;
`endif

   // Temperature variables
   Trk = TREF + `C2K;
   Tamb = $temperature + DTA;
   Tk   = Tamb + Vdt;
   `min_logexp(Tamb, Tamb, `TMAX, 10.0);
   `min_logexp(Trk,  Trk,  `TMAX, 10.0);
   `max_logexp(Tamb, Tamb, `TMIN, 10.0);
   `max_logexp(Trk,  Trk,  `TMIN, 10.0);

   tN  = Tk / Trk;
   tNa = Tamb / Trk;

   Vt  = `KBdivQQ * Tk;
   Vtr = `KBdivQQ * Trk;
   VtINV = 1.0 / Vt;
   VtrINV = 1.0 / Vtr;
   VdtINV = VtINV - VtrINV;

   // Depletion capacitances

   UdeT = -3.0 * Vt * ln(tN) + VDE * tN + (1.0 - tN) * VGB;
   `max_logexp(VDE_T, `VDLOW, UdeT, Vt);

   UdcT = -3.0 * Vt * ln(tN) + VDC * tN + (1.0 - tN) * VGC;
   `max_logexp(VDC_T, `VDLOW, UdcT, Vt);

`ifdef SUBSTRATE
   UdsT = -3.0 * Vt * ln(tN) + VDS * tN + (1.0 - tN) * VGS;
   `max_logexp(VDS_T, `VDLOW, UdsT, Vt);
`endif

   CJE_T = CJE * pow(VDE / VDE_T, PE);

`ifdef SUBSTRATE
   CJS_T = CJS * pow(VDS / VDS_T, PS);
`endif

   CJCscale = ((1.0 - XP) * pow(VDC / VDC_T, PC) + XP);
   CJCscaleINV = 1.0 / CJCscale;

   CJC_T = CJC * CJCscale;
   XP_T  = XP  * CJCscaleINV;

   // Resistances

   RE_T  = RE  * pow(tN, AE);
   RBV_T = RBV * pow(tN, AB - AQBO);
   RBC_T = RBC * pow(tN, AEX);
   RCC_T = RCC * pow(tN, AC);
   RCV_T = RCV * pow(tN, AEPI);

   // Current gains

   BF_T  = BF  * pow(tN, AE - AB - AQBO) * exp(-DVGBF * VdtINV);
   BRI_T = BRI * exp(-DVGBR * VdtINV);

   // Currents and voltages

   IS_T  = IS  * pow(tN, 4.0 - AB - AQBO + DAIS) * exp(-VGB * VdtINV);
   IK_T  = IK  * pow(tN, 1.0 - AB);   
   IBF_T = IBF * pow(tN, 6.0 - 2.0 * MLF) * exp(-VGJ * VdtINV / MLF);
   IBR_T = IBR * tN * tN * exp(-VGC * VdtINV / 2.0);
   VEF_T = VEF * pow(tN, AQBO) * CJCscaleINV;
   VER_T = VER * pow(tN, AQBO) * pow(VDE / VDE_T, -PE);

`ifdef SUBSTRATE
   ISS_T = ISS * pow(tN, 4.0 - AS) * exp(-VGS * VdtINV);
   if (ISS_T > 0.0)
      IKS_T = IKS * pow(tN, 1.0 - AS) * (IS_T / IS) * (ISS / ISS_T);
   else
      IKS_T = IKS * pow(tN, 1.0 - AS);
`endif

   // Transit times

   TAUE_T = TAUE * pow(tN, AB - 2.0) * exp(-DVGTE * VdtINV);
   TAUB_T = TAUB * pow(tN, AQBO + AB - 1.0);
   TEPI_T = TEPI * pow(tN, AEPI - 1.0);
   TAUR_T = TAUR * (TAUB_T + TEPI_T) / (TAUB + TEPI);

   // Avalanche constant

   Tk300 = Tk - 300.0;
   BnT = Bn * (1.0 + 7.2e-4 * Tk300 - 1.6e-6 * Tk300 * Tk300);

   // Heterojunction features

   DEG_T = DEG * pow(tN, AQBO);

`ifdef SELFHEATING
  // Tempearature scaling of the thermal resistance

   RTH_Tamb = RTH * pow(tNa, ATH);
`endif

// MULT - scaling

   IS_TM  = IS_T  * MULT;
   IK_TM  = IK_T  * MULT;
   IBF_TM = IBF_T * MULT;
   IBR_TM = IBR_T * MULT;
   IHC_M  = IHC   * MULT;
`ifdef SUBSTRATE
   ISS_TM = ISS_T * MULT;
   IKS_TM = IKS_T * MULT;
`endif
   CJE_TM = CJE_T * MULT;
   CJC_TM = CJC_T * MULT;

`ifdef SUBSTRATE
   CJS_TM = CJS_T * MULT;
`endif

   RE_TM      = RE_T     * invMULT;
   RBC_TM     = RBC_T    * invMULT;
   RBV_TM     = RBV_T    * invMULT;
   RCC_TM     = RCC_T    * invMULT;
   RCV_TM     = RCV_T    * invMULT;

`ifdef SELFHEATING
   RTH_Tamb_M = RTH_Tamb * invMULT;
`endif

